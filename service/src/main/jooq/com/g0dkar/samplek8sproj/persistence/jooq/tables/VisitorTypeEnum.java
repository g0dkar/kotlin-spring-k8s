/*
 * This file is generated by jOOQ.
 */
package com.g0dkar.samplek8sproj.persistence.jooq.tables;


import com.g0dkar.samplek8sproj.persistence.jooq.Indexes;
import com.g0dkar.samplek8sproj.persistence.jooq.Keys;
import com.g0dkar.samplek8sproj.persistence.jooq.Public;
import com.g0dkar.samplek8sproj.persistence.jooq.tables.records.VisitorTypeEnumRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class VisitorTypeEnum extends TableImpl<VisitorTypeEnumRecord> {

    private static final long serialVersionUID = 871617965;

    /**
     * The reference instance of <code>public.visitor_type_enum</code>
     */
    public static final VisitorTypeEnum VISITOR_TYPE_ENUM = new VisitorTypeEnum();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<VisitorTypeEnumRecord> getRecordType() {
        return VisitorTypeEnumRecord.class;
    }

    /**
     * The column <code>public.visitor_type_enum.id</code>.
     */
    public final TableField<VisitorTypeEnumRecord, Integer> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.visitor_type_enum.name</code>.
     */
    public final TableField<VisitorTypeEnumRecord, String> NAME = createField(DSL.name("name"), org.jooq.impl.SQLDataType.VARCHAR(32).nullable(false), this, "");

    /**
     * Create a <code>public.visitor_type_enum</code> table reference
     */
    public VisitorTypeEnum() {
        this(DSL.name("visitor_type_enum"), null);
    }

    /**
     * Create an aliased <code>public.visitor_type_enum</code> table reference
     */
    public VisitorTypeEnum(String alias) {
        this(DSL.name(alias), VISITOR_TYPE_ENUM);
    }

    /**
     * Create an aliased <code>public.visitor_type_enum</code> table reference
     */
    public VisitorTypeEnum(Name alias) {
        this(alias, VISITOR_TYPE_ENUM);
    }

    private VisitorTypeEnum(Name alias, Table<VisitorTypeEnumRecord> aliased) {
        this(alias, aliased, null);
    }

    private VisitorTypeEnum(Name alias, Table<VisitorTypeEnumRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> VisitorTypeEnum(Table<O> child, ForeignKey<O, VisitorTypeEnumRecord> key) {
        super(child, key, VISITOR_TYPE_ENUM);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.VISITOR_TYPE_ENUM_PKEY);
    }

    @Override
    public UniqueKey<VisitorTypeEnumRecord> getPrimaryKey() {
        return Keys.VISITOR_TYPE_ENUM_PKEY;
    }

    @Override
    public List<UniqueKey<VisitorTypeEnumRecord>> getKeys() {
        return Arrays.<UniqueKey<VisitorTypeEnumRecord>>asList(Keys.VISITOR_TYPE_ENUM_PKEY);
    }

    @Override
    public VisitorTypeEnum as(String alias) {
        return new VisitorTypeEnum(DSL.name(alias), this);
    }

    @Override
    public VisitorTypeEnum as(Name alias) {
        return new VisitorTypeEnum(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public VisitorTypeEnum rename(String name) {
        return new VisitorTypeEnum(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public VisitorTypeEnum rename(Name name) {
        return new VisitorTypeEnum(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<Integer, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
