/*
 * This file is generated by jOOQ.
 */
package com.g0dkar.samplek8sproj.persistence.jooq.tables;


import com.g0dkar.samplek8sproj.persistence.jooq.Indexes;
import com.g0dkar.samplek8sproj.persistence.jooq.Keys;
import com.g0dkar.samplek8sproj.persistence.jooq.Public;
import com.g0dkar.samplek8sproj.persistence.jooq.tables.records.MessagesRecord;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import javax.annotation.processing.Generated;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Messages extends TableImpl<MessagesRecord> {

    private static final long serialVersionUID = -1736141353;

    /**
     * The reference instance of <code>public.messages</code>
     */
    public static final Messages MESSAGES = new Messages();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MessagesRecord> getRecordType() {
        return MessagesRecord.class;
    }

    /**
     * The column <code>public.messages.id</code>.
     */
    public final TableField<MessagesRecord, UUID> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.messages.active</code>.
     */
    public final TableField<MessagesRecord, Boolean> ACTIVE = createField(DSL.name("active"), org.jooq.impl.SQLDataType.BOOLEAN.nullable(false).defaultValue(org.jooq.impl.DSL.field("true", org.jooq.impl.SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>public.messages.created</code>.
     */
    public final TableField<MessagesRecord, OffsetDateTime> CREATED = createField(DSL.name("created"), org.jooq.impl.SQLDataType.TIMESTAMPWITHTIMEZONE.nullable(false), this, "");

    /**
     * The column <code>public.messages.updated</code>.
     */
    public final TableField<MessagesRecord, OffsetDateTime> UPDATED = createField(DSL.name("updated"), org.jooq.impl.SQLDataType.TIMESTAMPWITHTIMEZONE.nullable(false), this, "");

    /**
     * The column <code>public.messages.parent</code>.
     */
    public final TableField<MessagesRecord, UUID> PARENT = createField(DSL.name("parent"), org.jooq.impl.SQLDataType.UUID, this, "");

    /**
     * The column <code>public.messages.message</code>.
     */
    public final TableField<MessagesRecord, String> MESSAGE = createField(DSL.name("message"), org.jooq.impl.SQLDataType.VARCHAR(1024).nullable(false), this, "");

    /**
     * The column <code>public.messages.visitor_type_id</code>.
     */
    public final TableField<MessagesRecord, Integer> VISITOR_TYPE_ID = createField(DSL.name("visitor_type_id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * Create a <code>public.messages</code> table reference
     */
    public Messages() {
        this(DSL.name("messages"), null);
    }

    /**
     * Create an aliased <code>public.messages</code> table reference
     */
    public Messages(String alias) {
        this(DSL.name(alias), MESSAGES);
    }

    /**
     * Create an aliased <code>public.messages</code> table reference
     */
    public Messages(Name alias) {
        this(alias, MESSAGES);
    }

    private Messages(Name alias, Table<MessagesRecord> aliased) {
        this(alias, aliased, null);
    }

    private Messages(Name alias, Table<MessagesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Messages(Table<O> child, ForeignKey<O, MessagesRecord> key) {
        super(child, key, MESSAGES);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.MESSAGES_PKEY);
    }

    @Override
    public UniqueKey<MessagesRecord> getPrimaryKey() {
        return Keys.MESSAGES_PKEY;
    }

    @Override
    public List<UniqueKey<MessagesRecord>> getKeys() {
        return Arrays.<UniqueKey<MessagesRecord>>asList(Keys.MESSAGES_PKEY);
    }

    @Override
    public List<ForeignKey<MessagesRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<MessagesRecord, ?>>asList(Keys.MESSAGES__FK_MESSAGES___MESSAGES_PARENT, Keys.MESSAGES__FK_MESSAGES___VISITOR_TYPE_ENUM);
    }

    public com.g0dkar.samplek8sproj.persistence.jooq.tables.Messages messages() {
        return new com.g0dkar.samplek8sproj.persistence.jooq.tables.Messages(this, Keys.MESSAGES__FK_MESSAGES___MESSAGES_PARENT);
    }

    public VisitorTypeEnum visitorTypeEnum() {
        return new VisitorTypeEnum(this, Keys.MESSAGES__FK_MESSAGES___VISITOR_TYPE_ENUM);
    }

    @Override
    public Messages as(String alias) {
        return new Messages(DSL.name(alias), this);
    }

    @Override
    public Messages as(Name alias) {
        return new Messages(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Messages rename(String name) {
        return new Messages(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Messages rename(Name name) {
        return new Messages(name, null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<UUID, Boolean, OffsetDateTime, OffsetDateTime, UUID, String, Integer> fieldsRow() {
        return (Row7) super.fieldsRow();
    }
}
