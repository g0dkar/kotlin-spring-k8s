/*
 * This file is generated by jOOQ.
 */
package com.g0dkar.samplek8sproj.persistence.jooq.tables.records;


import com.g0dkar.samplek8sproj.persistence.jooq.tables.Messages;
import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record7;
import org.jooq.Row7;
import org.jooq.impl.UpdatableRecordImpl;

import javax.annotation.processing.Generated;
import java.time.OffsetDateTime;
import java.util.UUID;


/**
 * This class is generated by jOOQ.
 */
@Generated(
        value = {
                "http://www.jooq.org",
                "jOOQ version:3.12.3"
        },
        comments = "This class is generated by jOOQ"
)
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class MessagesRecord extends UpdatableRecordImpl<MessagesRecord> implements Record7<UUID, Boolean, OffsetDateTime, OffsetDateTime, UUID, String, Integer> {

    private static final long serialVersionUID = 503040227;

    /**
     * Setter for <code>public.messages.id</code>.
     */
    public MessagesRecord setId(UUID value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>public.messages.id</code>.
     */
    public UUID getId() {
        return (UUID) get(0);
    }

    /**
     * Setter for <code>public.messages.active</code>.
     */
    public MessagesRecord setActive(Boolean value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>public.messages.active</code>.
     */
    public Boolean getActive() {
        return (Boolean) get(1);
    }

    /**
     * Setter for <code>public.messages.created</code>.
     */
    public MessagesRecord setCreated(OffsetDateTime value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>public.messages.created</code>.
     */
    public OffsetDateTime getCreated() {
        return (OffsetDateTime) get(2);
    }

    /**
     * Setter for <code>public.messages.updated</code>.
     */
    public MessagesRecord setUpdated(OffsetDateTime value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>public.messages.updated</code>.
     */
    public OffsetDateTime getUpdated() {
        return (OffsetDateTime) get(3);
    }

    /**
     * Setter for <code>public.messages.parent</code>.
     */
    public MessagesRecord setParent(UUID value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>public.messages.parent</code>.
     */
    public UUID getParent() {
        return (UUID) get(4);
    }

    /**
     * Setter for <code>public.messages.message</code>.
     */
    public MessagesRecord setMessage(String value) {
        set(5, value);
        return this;
    }

    /**
     * Getter for <code>public.messages.message</code>.
     */
    public String getMessage() {
        return (String) get(5);
    }

    /**
     * Setter for <code>public.messages.visitor_type_id</code>.
     */
    public MessagesRecord setVisitorTypeId(Integer value) {
        set(6, value);
        return this;
    }

    /**
     * Getter for <code>public.messages.visitor_type_id</code>.
     */
    public Integer getVisitorTypeId() {
        return (Integer) get(6);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<UUID> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record7 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row7<UUID, Boolean, OffsetDateTime, OffsetDateTime, UUID, String, Integer> fieldsRow() {
        return (Row7) super.fieldsRow();
    }

    @Override
    public Row7<UUID, Boolean, OffsetDateTime, OffsetDateTime, UUID, String, Integer> valuesRow() {
        return (Row7) super.valuesRow();
    }

    @Override
    public Field<UUID> field1() {
        return Messages.MESSAGES.ID;
    }

    @Override
    public Field<Boolean> field2() {
        return Messages.MESSAGES.ACTIVE;
    }

    @Override
    public Field<OffsetDateTime> field3() {
        return Messages.MESSAGES.CREATED;
    }

    @Override
    public Field<OffsetDateTime> field4() {
        return Messages.MESSAGES.UPDATED;
    }

    @Override
    public Field<UUID> field5() {
        return Messages.MESSAGES.PARENT;
    }

    @Override
    public Field<String> field6() {
        return Messages.MESSAGES.MESSAGE;
    }

    @Override
    public Field<Integer> field7() {
        return Messages.MESSAGES.VISITOR_TYPE_ID;
    }

    @Override
    public UUID component1() {
        return getId();
    }

    @Override
    public Boolean component2() {
        return getActive();
    }

    @Override
    public OffsetDateTime component3() {
        return getCreated();
    }

    @Override
    public OffsetDateTime component4() {
        return getUpdated();
    }

    @Override
    public UUID component5() {
        return getParent();
    }

    @Override
    public String component6() {
        return getMessage();
    }

    @Override
    public Integer component7() {
        return getVisitorTypeId();
    }

    @Override
    public UUID value1() {
        return getId();
    }

    @Override
    public Boolean value2() {
        return getActive();
    }

    @Override
    public OffsetDateTime value3() {
        return getCreated();
    }

    @Override
    public OffsetDateTime value4() {
        return getUpdated();
    }

    @Override
    public UUID value5() {
        return getParent();
    }

    @Override
    public String value6() {
        return getMessage();
    }

    @Override
    public Integer value7() {
        return getVisitorTypeId();
    }

    @Override
    public MessagesRecord value1(UUID value) {
        setId(value);
        return this;
    }

    @Override
    public MessagesRecord value2(Boolean value) {
        setActive(value);
        return this;
    }

    @Override
    public MessagesRecord value3(OffsetDateTime value) {
        setCreated(value);
        return this;
    }

    @Override
    public MessagesRecord value4(OffsetDateTime value) {
        setUpdated(value);
        return this;
    }

    @Override
    public MessagesRecord value5(UUID value) {
        setParent(value);
        return this;
    }

    @Override
    public MessagesRecord value6(String value) {
        setMessage(value);
        return this;
    }

    @Override
    public MessagesRecord value7(Integer value) {
        setVisitorTypeId(value);
        return this;
    }

    @Override
    public MessagesRecord values(UUID value1, Boolean value2, OffsetDateTime value3, OffsetDateTime value4, UUID value5, String value6, Integer value7) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached MessagesRecord
     */
    public MessagesRecord() {
        super(Messages.MESSAGES);
    }

    /**
     * Create a detached, initialised MessagesRecord
     */
    public MessagesRecord(UUID id, Boolean active, OffsetDateTime created, OffsetDateTime updated, UUID parent, String message, Integer visitorTypeId) {
        super(Messages.MESSAGES);

        set(0, id);
        set(1, active);
        set(2, created);
        set(3, updated);
        set(4, parent);
        set(5, message);
        set(6, visitorTypeId);
    }
}
